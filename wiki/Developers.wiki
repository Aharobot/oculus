#labels Phase-Implementation
==How to setup oculus for development==

As a developer you have two options. Extend the source code from SVN, or hook into the command server. The benefit of the [http://code.google.com/p/oculus/source/browse/trunk/oculus/WEB-INF/src/developer/CommandServer.java command server] is that you can get updates without having to merge your code. Also, because it is just a simple socket connection, you can use any language you prefer. So, C, ruby, python etc is all going to be supported this way. The last benefit is that you can connect to robot without logging into the web based control screens. Basic 'zombie mode' requires a valid user name and password, but you are not going to show up as a full fledged user in the web app controls. 

commands are available, but will be extended as there is need. 

To enable this feature, you must set: 

{{{
developer true
}}} 

in your [conf/oculus_settings.txt http://code.google.com/p/oculus/wiki/Oculus_Settings_File]

|| command || description ||
|| _*find*_ || request a 'dockgrab' command and return the coordinates for the dock. ||
|| _*dock*_ || initiate a docking ||
|| _*undock*_ || back to bot away from the doc ||
|| _*cam*_ || turn on the video stream so you can do _find_ commands ||
|| _*state*_ || dump current variables in the [http://code.google.com/p/oculus/source/browse/trunk/oculus/WEB-INF/src/oculus/State.java State] object ||
|| _*tcp*_ || returns the number of active TCP Connections ||
|| _*users*_ || returns the number of active web users ||
|| _*factory*_ || restore factory settings ||
|| _*reboot*_ || restarts the oculus web application ||

An example SWING client is avalable in [http://code.google.com/p/zephyropen/source/browse/#svn%2Fzephyropen%2Fsrc%2Fzephyropen%2Fsocket%2Fmulticast%2Fgui SVN], or as a [http://verticalchallenge.org/oculus/oculus.jar JAR ready to use.]

Running the jar, build a simple bat file like:

{{{
start javaw -jar oculus.jar 192.168.1.xxx 4444 brad +tVfDvTicIG5chk8kbFy34L63A8=  
}}}

Or on osx/linux do this instead: 

{{{
java -jar oculus.jar 192.168.1.xxx 4444 brad +tVfDvTicIG5chk8ibFky34L63A8= &
}}}

The parameters are, robot's local ip, port number, user name, hashed password. (find these in oculus/conf/oculus_settings.txt)

This is available in plain text over TCP, but you client must first send user name and password first. As an example of how the TCP connections are sent updates, see below. We can chat with the logged in users and any TCP connections as well. All tcp commands will be seen in the web user's screens as chat text for now, so you''ll see the requests the clients are making. 

An Example in screen capture below:
<br />
<wiki:video url="http://www.youtube.com/watch?v=-JDNDlVpnhk"/>
<br />
_watch in 480p if you want to be able to actually read the text on screen_
<br />
<g:plusone size="medium"></g:plusone>