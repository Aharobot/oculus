#labels Phase-Implementation
#How to setup oculus for development.

= Introduction =

As a developer you have two options. Extend the source code from SVN, or hook into the command server. The benefit of the [http://code.google.com/p/oculus/source/browse/trunk/oculus/WEB-INF/src/developer/CommandServer.java command server] is that you can get updates without having to merge your code. Also, because it is just a simple socket connection, you can use any language you prefer. So, C, ruby, python etc is all going to be supported this way. The last benefit is that you can connect to robot without logging into the web based control screens. Basic 'zombie' mode requires no Currently only a few commands are available, but will be extended as there is need. 

|| command || description ||
|| _*find*_ || request a 'dockgrab' command and return the coordinates for the dock. ||
|| _*dock*_ || initiate a docking ||
|| _*undock*_ || back to bot away from the doc ||
|| _*cam*_ || turn on the video stream so you can do _find_ commands ||
|| _*state*_ || dump current variables in the [http://code.google.com/p/oculus/source/browse/trunk/oculus/WEB-INF/src/oculus/State.java State] object ||
|| _*tcp*_ || returns the number of active TCP Connections ||
|| _*users*_ || returns the number of active web users ||

= Find Dock Results =

After a variable amount of time (about 1-3 seconds) the following strings are written to the TCP client. you just need to parse the variable name, the colon, and then the value. Each name value pair is terminated with a newline, so you just need to read full lines from whatever code environment you like.

||dockdensity : 0.025641|| tba ||
||dockxpos : 117|| is the number of pixels from the right (users POV) edge  ||
||dockypos : 134|| is the number of pixels from the top ||
||dockxsize : 79|| is the number of pixels the dock is wide ||
||dockysize : 66|| is the number of pixels the dock is high ||

These values can be used to compute move commands for docking.

An example client is avalable here in [http://code.google.com/p/zephyropen/source/browse/#svn%2Fzephyropen%2Fsrc%2Fzephyropen%2Fsocket%2Fmulticast%2Fgui SVN], or as a [http://verticalchallenge.org/oculus/oculus.jar JAR ready to use.]

Running the jar, build a simple bat file like:

{{{
start javaw -jar oculus.jar 192.168.1.xxx 4444 brad +tVfDvTicIG5chk8ibFy34L63A8=  
}}}

Or on osx/linux do this instead: 

{{{
java -jar oculus.jar 192.168.1.xxx 4444 brad +tVfDvTicIG5chk8ibFy34L63A8= &
}}}

The parameters are, robot's local ip, port number, user name, hashed password. (find these in oculus/conf/oculus_settings.txt)

This is available in plain text over TCP, but you client must first send user name and password first. As an example of how the TCP connections are sent updates, see below. We can chat with the logged in users and any TCP connections as well. All tcp commands will be seen in the web user's screens as chat text for now, so you''ll see the requests the clients are making. 
