#labels Phase-Implementation,Featured,Beta
==How to setup oculus for development==

As a developer you have two options. Extend the source code from SVN, or hook into the command server. The benefit of the [http://code.google.com/p/oculus/source/browse/trunk/oculus/WEB-INF/src/developer/CommandServer.java command server] is that you can get updates without having to merge your code. Also, because it is just a simple socket connection, you can use any language you prefer. So, C, ruby, python etc is all going to be supported this way. The last benefit is that you can connect to robot without logging into the web based control screens. Basic 'zombie mode' requires a valid user name and password, but you are not going to show up as a full fledged user in the web app controls. 

commands are available, but will be extended as there is need. 

To enable this feature, you must set: 

{{{
developer true
}}} 

in your [http://code.google.com/p/oculus/wiki/Oculus_Settings_File Oculus/conf/oculus_settings.txt]

|| command || description ||
|| _*find*_ || request a 'dockgrab' command and return the coordinates for the dock. ||
|| _*dock*_ || initiate a docking ||
|| _*undock*_ || back to bot away from the doc ||
|| _*nudge*_ || left|right|backward|forward  ||
|| _*move*_ || left|right|backward|forward  ||
|| _*reboot*_ || restarts the oculus web application ||
|| _*publish*_ || turn on the video stream so you can do _find_ commands ||
|| _*state*_ || dump current variables in the [http://code.google.com/p/oculus/source/browse/trunk/oculus/WEB-INF/src/oculus/State.java State] object ||
|| _*state xxx yyy*_ || will set variable xxx to the value of yyy in the [http://code.google.com/p/oculus/source/browse/trunk/oculus/WEB-INF/src/oculus/State.java State Objects] ||
|| _*tcp*_ || returns the number of active TCP Connections ||
|| _*users*_ || returns the number of active web users ||
|| _*factory*_ || restore factory settings ||
|| _*restart*_ || restarts the host computer ||
|| _*reboot*_ || restarts the oculus web application ||
|| _*version*_ || gets the current version of the robot's software. ||
|| _*settings*_ || dumps all the settings from the config file. _will not send email password._ ||

An example SWING client is avalable in [http://code.google.com/p/zephyropen/source/browse/#svn%2Fzephyropen%2Fsrc%2Fzephyropen%2Fsocket%2Fmulticast%2Fgui SVN], or as a [http://verticalchallenge.org/oculus/oculus.jar JAR ready to use.]

Running the jar, build a simple bat file like:

{{{
start javaw -jar oculus.jar 192.168.1.xxx 4444 brad +tVfDvTicIG5chk8kbFy34L63A8=  
}}}

Or on osx/linux do this instead: 

{{{
java -jar oculus.jar 192.168.1.xxx 4444 brad +tVfDvTicIG5chk8ibFky34L63A8= &
}}}

The parameters are, robot's local ip, port number, user name, hashed password. (find these in oculus/conf/oculus_settings.txt)

This is available in plain text over TCP, but you client must first send user name and password first. As an example of how the TCP connections are sent updates, see below. We can chat with the logged in users and any TCP connections as well. All tcp commands will be seen in the web user's screens as chat text for now, so you''ll see the requests the clients are making. 

An Example in screen capture below:
<br />
<wiki:video url="http://www.youtube.com/watch?v=-JDNDlVpnhk"/>
<br />
_watch in 480p if you want to be able to actually read the text on screen_
<br />

== Deploying class and java script files ==

If you are coding directly in java, here is deployment script that will move your files over to the robot. The use of 'sudo' and 'chown' are required to make SMB shares behave. 

{{{
#! /bin/sh

LOCAL="/Users/brad/Documents/workspace/Oculus/webapps/oculus"
REMOTE="/Volumes/temp/oculus/webapps/oculus"

sudo rm -rf $REMOTE/*.html
sudo rm -rf $REMOTE/javascript
sudo rm -rf $REMOTE/WEB-INF/classes
sudo rm -rf $REMOTE/WEB-INF/src
#sudo rm -rf $REMOTE/flash

sudo cp $LOCAL/*.html $REMOTE/
sudo cp -r $LOCAL/javascript $REMOTE/
sudo cp -r $LOCAL/WEB-INF/classes $REMOTE/WEB-INF/classes/
sudo cp -r $LOCAL/WEB-INF/src $REMOTE/WEB-INF/
#sudo cp -r $LOCAL/flash $REMOTE/
        
sudo chown -R brad $REMOTE
date
}}}

=== Samba not working? Use FTP ==

If running an FTP server on the robot, you can use this script to deploy your class files. 

{{{

#!/bin/sh

HOST='192.168.1.xxx'
USER='brad'
PASSWD='xxxx'

ftp -v -n $HOST <<END_SCRIPT
quote USER $USER
quote PASS $PASSWD

binary

cd webapps/Oculus/WEB-INF/classes/oculus
lcd webapps/Oculus/WEB-INF/classes/oculus
prompt off
mput *.class

cd ../developer
lcd ../developer
prompt off
mput *.class

cd sonar
lcd sonar
prompt off
mput *.class

cd ../ftp
lcd ../ftp
prompt off
mput *.class


cd ../terminal
lcd ../terminal
prompt off
mput *.class

cd ../gui
lcd ../gui
prompt off
mput *.class

bye
quit
END_SCRIPT

java -classpath "./webapps/oculus/WEB-INF/classes/" developer.terminal.Terminal 192.168.1.xxx 4444 user pass restart bye

exit 0
}}}

Note that you can open a terminal session and then send a few commands. In this case, restart the server and then logout. This basically uploads the changes and gets the server back up. 

<br />
<g:plusone size="medium"></g:plusone>